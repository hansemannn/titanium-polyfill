/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-present by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */

package ti.polyfill

import android.app.Activity
import android.content.pm.PackageManager
import android.net.Uri
import android.os.Build
import android.provider.MediaStore
import android.view.View
import com.github.javiersantos.piracychecker.PiracyChecker
import com.github.javiersantos.piracychecker.allow
import com.github.javiersantos.piracychecker.doNotAllow
import com.github.marlonlom.utilities.timeago.TimeAgo
import com.google.android.material.dialog.MaterialAlertDialogBuilder
import com.google.android.material.snackbar.Snackbar
import org.appcelerator.kroll.KrollDict
import org.appcelerator.kroll.KrollFunction
import org.appcelerator.kroll.KrollModule
import org.appcelerator.kroll.annotations.Kroll
import org.appcelerator.kroll.annotations.Kroll.method
import org.appcelerator.titanium.TiApplication
import java.text.NumberFormat
import java.util.*

@Kroll.module(name = "TitaniumPolyfill", id = "ti.polyfill")
class TitaniumPolyfillModule: KrollModule() {

	@method
	fun formattedCurrency(params: KrollDict): String {
		val value = params.getDouble("value")
		val currency = params.getString("currency")
		val minimumFractionDigits = params.getInt("minimumFractionDigits")
		val maximumFractionDigits = params.getInt("maximumFractionDigits")

		val format: NumberFormat = NumberFormat.getCurrencyInstance(Locale.getDefault())
		format.currency = Currency.getInstance(currency)

		minimumFractionDigits?.let {
			format.minimumFractionDigits = it
		}

		maximumFractionDigits?.let {
			format.maximumFractionDigits = it
		}

		return format.format(value)
	}

	@method
	fun getMediaStoreURL(url: String): String {
		return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
			MediaStore.getMediaUri(TiApplication.getInstance(), Uri.parse(url)).toString()
		} else {
			return url;
		}
	}

	@method
	fun installSource(): String {
		val context = TiApplication.getInstance().applicationContext
		val pkgManager: PackageManager = context.packageManager
		val installerPackageName = pkgManager.getInstallerPackageName(context.packageName) ?: ""

		return when {
			installerPackageName.startsWith("com.amazon") -> {
				"amazon"
			}
			"com.huawei.appmarket" === installerPackageName -> {
				"huawei"
			}
			"com.android.vending" == installerPackageName -> {
				"play_store"
			}
			else -> {
				"unknown"
			}
		}
	}

	@method
	fun timezoneId(): String {
		return TimeZone.getDefault().id
	}

	@method
	private fun isAppInstalled(packageName: String): Boolean {
		return try {
			val packageManager: PackageManager = TiApplication.getAppCurrentActivity().packageManager
			packageManager.getPackageInfo(packageName, 0)
			true
		} catch (e: PackageManager.NameNotFoundException) {
			false
		}
	}

	@method
	fun showNotification(params: KrollDict) {
		val title = params.getString("title");
		val duration = params.optInt("duration", Snackbar.LENGTH_SHORT);

		val view = TiApplication.getAppCurrentActivity().findViewById(android.R.id.content) as View
		val snackBar = Snackbar.make(view, title, duration)
		snackBar.setAction("OK", null)

		snackBar.show()
	}

	@Kroll.method
	fun showAlert(params: KrollDict) {
		val callback = params["callback"] as KrollFunction
		val title = params["title"] as? String
		val message = params["message"] as? String
		val buttonNames = params["buttonNames"] as Array<Object>
		val nativeButtonNames = buttonNames.map { it as String }

		var builder = MaterialAlertDialogBuilder(getCurrentActivity())
			.setTitle(title)
			.setMessage(message)
			.setOnCancelListener {
				fireEventWithIndex(callback, -1)
			}

		buttonNames?.let {
			when (buttonNames.size) {
				1 -> {
					builder = builder.setPositiveButton(nativeButtonNames.first()) { _, _ ->
						fireEventWithIndex(callback, 0)
					}
				}
				2 -> {
					builder = builder.setPositiveButton(nativeButtonNames.first()) { _, _ ->
						fireEventWithIndex(callback, 0)
					}
							.setNegativeButton(nativeButtonNames[1]) { _, _ ->
								fireEventWithIndex(callback, 1)
							}
				}
				3 -> {
					builder = builder.setPositiveButton(nativeButtonNames.first()) { _, _ ->
						fireEventWithIndex(callback, 0)
					}
							.setNegativeButton(nativeButtonNames[1]) { _, _ ->
								fireEventWithIndex(callback, 1)
							}
							.setNeutralButton(nativeButtonNames[2]) { _, _ ->
								fireEventWithIndex(callback, 2)
							}
				}
			}
		}

		builder.show()
	}

	@Kroll.method
	fun relativeDateString(date: Date): String {
		return TimeAgo.using(date.time);
	}

	@Kroll.method
	fun enablePiracyChecker(callback: KrollFunction) {
		PiracyChecker(getCurrentActivity())
			.enableUnauthorizedAppsCheck()
			.allow {
				val event = KrollDict()
				event["allow"] = true

				callback.callAsync(getKrollObject(), event)
			}
			.doNotAllow { piracyCheckerError, _ ->
				val event = KrollDict()
				event["allow"] = false
				event["error"] = piracyCheckerError.name

				callback.callAsync(getKrollObject(), event)
			}
			.start()
	}

	private fun fireEventWithIndex(callback: KrollFunction, index: Number) {
		val event = KrollDict()
		event["index"] = index;
		callback.callAsync(getKrollObject(), event)
	}

	private fun getCurrentActivity(): Activity {
		var currentActivity = TiApplication.getInstance().currentActivity
		if (currentActivity == null) {
			currentActivity = this.activity.get()
		}
		return currentActivity!!
	}
}
